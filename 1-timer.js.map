{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nlet userSelectedDate = null;\n\nconst btnStart = document.querySelector(\"[data-start]\");\nconst dateInput = document.querySelector(\"#datetime-picker\");\nconst daysSpan = document.querySelector(\"[data-days]\");\nconst hoursSpan = document.querySelector(\"[data-hours]\");\nconst minutesSpan = document.querySelector(\"[data-minutes]\");\nconst secondsSpan = document.querySelector(\"[data-seconds]\");\n\nbtnStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      \n      if (selectedDates[0] <= new Date()) {\n          iziToast.warning({\n          message: 'Please choose a date in the future'\n});\n          btnStart.disabled = true;\n          return \n      }\n      btnStart.disabled = false;\n      userSelectedDate = selectedDates[0];\n      console.log(selectedDates[0]);\n  },\n};\nflatpickr(\"#datetime-picker\", options);\n\nbtnStart.addEventListener(\"click\", startTimer);\nfunction startTimer() {\n    btnStart.disabled = true;\n    dateInput.disabled = true;\n\n    const intervalId = setInterval(() => {\n        const date = convertMs(userSelectedDate - new Date());\n        daysSpan.textContent = addLeadingZero(date.days);\n        hoursSpan.textContent = addLeadingZero(date.hours);\n        minutesSpan.textContent = addLeadingZero(date.minutes);\n        secondsSpan.textContent = addLeadingZero(date.seconds);\n        if (userSelectedDate - new Date() < 1000) {\n            clearInterval(intervalId);\n            dateInput.disabled = false;\n        }\n    }, 1000);\n}\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\nfunction addLeadingZero(value) {\n    return value.toString().padStart(2, \"0\");\n}\n\n"],"names":["userSelectedDate","btnStart","dateInput","daysSpan","hoursSpan","minutesSpan","secondsSpan","options","selectedDates","iziToast","flatpickr","startTimer","intervalId","date","convertMs","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"+IAMA,IAAIA,EAAmB,KAEvB,MAAMC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DL,EAAS,SAAW,GAEpB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAEnB,GAAIA,EAAc,CAAC,GAAK,IAAI,KAAQ,CAChCC,EAAS,QAAQ,CACjB,QAAS,oCACnB,CAAC,EACSR,EAAS,SAAW,GACpB,MACH,CACDA,EAAS,SAAW,GACpBD,EAAmBQ,EAAc,CAAC,EAClC,QAAQ,IAAIA,EAAc,CAAC,CAAC,CAC/B,CACH,EACAE,EAAU,mBAAoBH,CAAO,EAErCN,EAAS,iBAAiB,QAASU,CAAU,EAC7C,SAASA,GAAa,CAClBV,EAAS,SAAW,GACpBC,EAAU,SAAW,GAErB,MAAMU,EAAa,YAAY,IAAM,CACjC,MAAMC,EAAOC,EAAUd,EAAmB,IAAI,IAAM,EACpDG,EAAS,YAAcY,EAAeF,EAAK,IAAI,EAC/CT,EAAU,YAAcW,EAAeF,EAAK,KAAK,EACjDR,EAAY,YAAcU,EAAeF,EAAK,OAAO,EACrDP,EAAY,YAAcS,EAAeF,EAAK,OAAO,EACjDb,EAAmB,IAAI,KAAS,MAChC,cAAcY,CAAU,EACxBV,EAAU,SAAW,GAE5B,EAAE,GAAI,CACX,CACA,SAASY,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,SAASL,EAAeM,EAAO,CAC3B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CAC3C"}